name: Manage Kaggle Notebooks

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 */9 * * *'  # 定时任务，每9小时触发一次
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 允许推送到仓库

jobs:
  run-notebooks:
    runs-on: ubuntu-latest  # 在最新的 Ubuntu 环境上运行
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}

    steps:
      - name: Checkout code  # 检出当前的代码仓库
        uses: actions/checkout@v2

      - name: Install dependencies  # 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install kaggle

      - name: Setup Kaggle API credentials  # 设置 Kaggle API 凭证
        run: |
          mkdir -p ~/.kaggle
          echo "${{ secrets.KAGGLE_JSON }}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Determine Notebook Title  # 确定 Notebook 标题
        id: determine-title
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            # 读取存储的状态文件（如果存在）
            if [ -f notebook_state.txt ]; then
              STATE=$(cat notebook_state.txt)
            else
              STATE="A"  # 默认值
            fi
            
            # 根据状态设置标题
            if [ "$STATE" = "A" ]; then
              NOTEBOOK_TITLE="notebook_A"
              NEW_STATE="B"  # 更新状态为 B
            else
              NOTEBOOK_TITLE="notebook_B"
              NEW_STATE="A"  # 更新状态为 A
            fi
          else
            NOTEBOOK_TITLE="notebook_C"
          fi
          
          echo "NOTEBOOK_TITLE=${NOTEBOOK_TITLE}" >> $GITHUB_ENV
          echo "${NEW_STATE:-$STATE}" > notebook_state.txt  # 保存状态到文件

      - name: Commit updated state  # Commit the updated state file to the repository
        if: github.event_name == 'schedule'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add notebook_state.txt
          git commit -m "Update notebook state to ${NEW_STATE:-$STATE}"
          git push

      - name: Prepare and Push Notebook  # 准备并推送 Notebook
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          if [ "${NOTEBOOK_TITLE}" = "notebook_C" ]; then
            NOTEBOOK_DIR="notebook_C"
            if [ -d "${NOTEBOOK_DIR}" ]; then
              echo "Removing old ${NOTEBOOK_DIR} directory"
              rm -rf ${NOTEBOOK_DIR}
            fi
          else
            NOTEBOOK_DIR="notebook_${TIMESTAMP}"
          fi
          
          echo "Creating directory: ${NOTEBOOK_DIR}"
          mkdir -p ${NOTEBOOK_DIR}
          
          echo "Copying files into ${NOTEBOOK_DIR}"
          cp -v script/main.py ${NOTEBOOK_DIR}/main.py
          cp -v script/kernel-metadata.json ${NOTEBOOK_DIR}/kernel-metadata.json
          
          echo "Updating kernel-metadata.json with title: ${NOTEBOOK_TITLE}"
          sed -i "s/\"title\": \".*\"/\"title\": \"${NOTEBOOK_TITLE}\"/" ${NOTEBOOK_DIR}/kernel-metadata.json
          
          kaggle kernels push -p ${NOTEBOOK_DIR} || { echo "Failed to push notebook to Kaggle"; exit 1; }
